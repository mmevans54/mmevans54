{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3f7f86d1",
   "metadata": {
    "papermill": {
     "duration": 0.027737,
     "end_time": "2024-05-28T05:10:34.385989",
     "exception": false,
     "start_time": "2024-05-28T05:10:34.358252",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction\n",
    "\n",
    "This notebook provides you an opportunity to demonstrate proficiency in meeting course learning goals by applying a support vector machine to solve a classification problem using widely-used ML libraries and an ML workflow.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db410c9c",
   "metadata": {
    "papermill": {
     "duration": 0.027742,
     "end_time": "2024-05-28T05:10:34.441460",
     "exception": false,
     "start_time": "2024-05-28T05:10:34.413718",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Mine Detection (Revisited)\n",
    "\n",
    "In this notebook, you will revisit [a previously seen classification problem](https://www.kaggle.com/code/bakosy/cs-513-notebook-4-classification-with-perceptrons), and see if you can build a better classification model that can predict whether or not a sonar signature is from a mine or a rock.\n",
    "\n",
    "<div class=\"alert alert-block alert-warning\">\n",
    "<b>Tip:</b> We suggest reviewing your Notebook 4: Classification with Perceptrons.\n",
    "</div>\n",
    "\n",
    "We'll use a version of the [sonar data set](https://www.openml.org/search?type=data&sort=runs&id=40&status=active) by Gorman and Sejnowski. Take a moment now to [reacquaint yourself with the subject matter of this data set](https://datahub.io/machine-learning/sonar%23resource-sonar), and look at the details of the version of this data set, [Mines vs Rocks, hosted on Kaggle](https://www.kaggle.com/datasets/mattcarter865/mines-vs-rocks).\n",
    "\n",
    "Similar to [a previous notebook](https://www.kaggle.com/code/bakosy/cs-513-notebook-4-classification-with-perceptrons), this notebook expects each student to implement the ML workflow steps. We will get you started by providing the first step, loading the data, and providing some landmarks and tips below. Your process should demonstrate:\n",
    "\n",
    "1. Loading the data\n",
    "2. Exploring the data\n",
    "3. Preprocessing the data\n",
    "4. Preparing the training and test sets\n",
    "5. Creating and configuring a sklearn.svm.SVC\n",
    "6. Training the SVM\n",
    "7. Validating and Testing the SVM\n",
    "8. Demonstrating making predictions\n",
    "9. Evaluate (and Improve) the results\n",
    "\n",
    "Can you train a classifier that can predict whether a sonar signature is from a mine or a rock? \"Three trained human subjects were each tested on 100 signals, chosen at random from the set of 208 returns used to create this data set. Their responses ranged between 88% and 97% correct.\" Can your classifier outperform the human subjects?\n",
    "\n",
    "Most importantly, how does the performance of the SVM classifier compare to the perceptron results observed in [Notebook 4](https://www.kaggle.com/code/bakosy/cs-513-notebook-4-classification-with-perceptrons)?\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e4fc350",
   "metadata": {
    "papermill": {
     "duration": 0.026153,
     "end_time": "2024-05-28T05:10:34.501419",
     "exception": false,
     "start_time": "2024-05-28T05:10:34.475266",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 1: Load the Data\n",
    "\n",
    "The notebook comes pre-bundled with the [Mines vs Rocks data set](https://www.kaggle.com/datasets/mattcarter865/mines-vs-rocks). Our first step is to create a pandas DataFrame from the CSV file. Note that the CSV file has no header row. Loading the CSV file into a DataFrame will make it easy for us to explore the data, preprocess it, and split it into training and test sets.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c23ca661",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:34.556332Z",
     "iopub.status.busy": "2024-05-28T05:10:34.555865Z",
     "iopub.status.idle": "2024-05-28T05:10:34.590947Z",
     "shell.execute_reply": "2024-05-28T05:10:34.589938Z"
    },
    "papermill": {
     "duration": 0.06613,
     "end_time": "2024-05-28T05:10:34.593944",
     "exception": false,
     "start_time": "2024-05-28T05:10:34.527814",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "sonar_csv_path = \"../input/mines-vs-rocks/sonar.all-data.csv\"\n",
    "sonar_data = pd.read_csv(sonar_csv_path, header=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6330433f",
   "metadata": {
    "papermill": {
     "duration": 0.026495,
     "end_time": "2024-05-28T05:10:34.648071",
     "exception": false,
     "start_time": "2024-05-28T05:10:34.621576",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We now have a pandas DataFrame encapsulating the sonar data, and can proceed with our data exploration."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58fad776",
   "metadata": {
    "papermill": {
     "duration": 0.027259,
     "end_time": "2024-05-28T05:10:34.701922",
     "exception": false,
     "start_time": "2024-05-28T05:10:34.674663",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 2: Explore the Data\n",
    "\n",
    "When exploring these data, it is important to look for any challenges in the Mines vs Rocks data frame/ data set that will hault progress for later steps, including test, train, split. As far as data strcuture goes, this includes erronous NAs, missing values, an incomplete dataset, and uneven coulmns. \n",
    "\n",
    "Arguably, the most important piece of data exploration, assesses whether or not the model will meet underlying assumptions for the SVM applications. For example, standardization is typically a crucial step for SVM models because it balances features for the optimization steps. Standardization involves transforming these data, ensuring each feature has a mean of zero and a standard deviation of one. With standardization, the model is able to predict decision boundaries and output a valid accuracy score. Once modeling assumptions are met, we can trust our validation and optimization metrics."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62c75f3a",
   "metadata": {
    "papermill": {
     "duration": 0.02672,
     "end_time": "2024-05-28T05:10:34.755408",
     "exception": false,
     "start_time": "2024-05-28T05:10:34.728688",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "First, we begin by viewing the first five rows of data to get a sense for the dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4bc8d055",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:34.810826Z",
     "iopub.status.busy": "2024-05-28T05:10:34.810352Z",
     "iopub.status.idle": "2024-05-28T05:10:34.861958Z",
     "shell.execute_reply": "2024-05-28T05:10:34.860641Z"
    },
    "papermill": {
     "duration": 0.083143,
     "end_time": "2024-05-28T05:10:34.865105",
     "exception": false,
     "start_time": "2024-05-28T05:10:34.781962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>51</th>\n",
       "      <th>52</th>\n",
       "      <th>53</th>\n",
       "      <th>54</th>\n",
       "      <th>55</th>\n",
       "      <th>56</th>\n",
       "      <th>57</th>\n",
       "      <th>58</th>\n",
       "      <th>59</th>\n",
       "      <th>60</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0200</td>\n",
       "      <td>0.0371</td>\n",
       "      <td>0.0428</td>\n",
       "      <td>0.0207</td>\n",
       "      <td>0.0954</td>\n",
       "      <td>0.0986</td>\n",
       "      <td>0.1539</td>\n",
       "      <td>0.1601</td>\n",
       "      <td>0.3109</td>\n",
       "      <td>0.2111</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0027</td>\n",
       "      <td>0.0065</td>\n",
       "      <td>0.0159</td>\n",
       "      <td>0.0072</td>\n",
       "      <td>0.0167</td>\n",
       "      <td>0.0180</td>\n",
       "      <td>0.0084</td>\n",
       "      <td>0.0090</td>\n",
       "      <td>0.0032</td>\n",
       "      <td>R</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0453</td>\n",
       "      <td>0.0523</td>\n",
       "      <td>0.0843</td>\n",
       "      <td>0.0689</td>\n",
       "      <td>0.1183</td>\n",
       "      <td>0.2583</td>\n",
       "      <td>0.2156</td>\n",
       "      <td>0.3481</td>\n",
       "      <td>0.3337</td>\n",
       "      <td>0.2872</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0084</td>\n",
       "      <td>0.0089</td>\n",
       "      <td>0.0048</td>\n",
       "      <td>0.0094</td>\n",
       "      <td>0.0191</td>\n",
       "      <td>0.0140</td>\n",
       "      <td>0.0049</td>\n",
       "      <td>0.0052</td>\n",
       "      <td>0.0044</td>\n",
       "      <td>R</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0262</td>\n",
       "      <td>0.0582</td>\n",
       "      <td>0.1099</td>\n",
       "      <td>0.1083</td>\n",
       "      <td>0.0974</td>\n",
       "      <td>0.2280</td>\n",
       "      <td>0.2431</td>\n",
       "      <td>0.3771</td>\n",
       "      <td>0.5598</td>\n",
       "      <td>0.6194</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0232</td>\n",
       "      <td>0.0166</td>\n",
       "      <td>0.0095</td>\n",
       "      <td>0.0180</td>\n",
       "      <td>0.0244</td>\n",
       "      <td>0.0316</td>\n",
       "      <td>0.0164</td>\n",
       "      <td>0.0095</td>\n",
       "      <td>0.0078</td>\n",
       "      <td>R</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0100</td>\n",
       "      <td>0.0171</td>\n",
       "      <td>0.0623</td>\n",
       "      <td>0.0205</td>\n",
       "      <td>0.0205</td>\n",
       "      <td>0.0368</td>\n",
       "      <td>0.1098</td>\n",
       "      <td>0.1276</td>\n",
       "      <td>0.0598</td>\n",
       "      <td>0.1264</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0121</td>\n",
       "      <td>0.0036</td>\n",
       "      <td>0.0150</td>\n",
       "      <td>0.0085</td>\n",
       "      <td>0.0073</td>\n",
       "      <td>0.0050</td>\n",
       "      <td>0.0044</td>\n",
       "      <td>0.0040</td>\n",
       "      <td>0.0117</td>\n",
       "      <td>R</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0762</td>\n",
       "      <td>0.0666</td>\n",
       "      <td>0.0481</td>\n",
       "      <td>0.0394</td>\n",
       "      <td>0.0590</td>\n",
       "      <td>0.0649</td>\n",
       "      <td>0.1209</td>\n",
       "      <td>0.2467</td>\n",
       "      <td>0.3564</td>\n",
       "      <td>0.4459</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0031</td>\n",
       "      <td>0.0054</td>\n",
       "      <td>0.0105</td>\n",
       "      <td>0.0110</td>\n",
       "      <td>0.0015</td>\n",
       "      <td>0.0072</td>\n",
       "      <td>0.0048</td>\n",
       "      <td>0.0107</td>\n",
       "      <td>0.0094</td>\n",
       "      <td>R</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 61 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       0       1       2       3       4       5       6       7       8   \\\n",
       "0  0.0200  0.0371  0.0428  0.0207  0.0954  0.0986  0.1539  0.1601  0.3109   \n",
       "1  0.0453  0.0523  0.0843  0.0689  0.1183  0.2583  0.2156  0.3481  0.3337   \n",
       "2  0.0262  0.0582  0.1099  0.1083  0.0974  0.2280  0.2431  0.3771  0.5598   \n",
       "3  0.0100  0.0171  0.0623  0.0205  0.0205  0.0368  0.1098  0.1276  0.0598   \n",
       "4  0.0762  0.0666  0.0481  0.0394  0.0590  0.0649  0.1209  0.2467  0.3564   \n",
       "\n",
       "       9   ...      51      52      53      54      55      56      57  \\\n",
       "0  0.2111  ...  0.0027  0.0065  0.0159  0.0072  0.0167  0.0180  0.0084   \n",
       "1  0.2872  ...  0.0084  0.0089  0.0048  0.0094  0.0191  0.0140  0.0049   \n",
       "2  0.6194  ...  0.0232  0.0166  0.0095  0.0180  0.0244  0.0316  0.0164   \n",
       "3  0.1264  ...  0.0121  0.0036  0.0150  0.0085  0.0073  0.0050  0.0044   \n",
       "4  0.4459  ...  0.0031  0.0054  0.0105  0.0110  0.0015  0.0072  0.0048   \n",
       "\n",
       "       58      59  60  \n",
       "0  0.0090  0.0032   R  \n",
       "1  0.0052  0.0044   R  \n",
       "2  0.0095  0.0078   R  \n",
       "3  0.0040  0.0117   R  \n",
       "4  0.0107  0.0094   R  \n",
       "\n",
       "[5 rows x 61 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sonar_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da7ac65a",
   "metadata": {
    "papermill": {
     "duration": 0.026351,
     "end_time": "2024-05-28T05:10:34.918424",
     "exception": false,
     "start_time": "2024-05-28T05:10:34.892073",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "I examine the shape of these data, because it provides insight into the data characteristics. For example, if there are notable imbalances or if computational size will be challenging during train/testing methods. I have learned there are 208 samples and 61 columns (one of which is not a sonar device and the column is instead a classifier for rock or cylinder)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "be004681",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:34.975066Z",
     "iopub.status.busy": "2024-05-28T05:10:34.973761Z",
     "iopub.status.idle": "2024-05-28T05:10:34.981748Z",
     "shell.execute_reply": "2024-05-28T05:10:34.980681Z"
    },
    "papermill": {
     "duration": 0.039425,
     "end_time": "2024-05-28T05:10:34.984508",
     "exception": false,
     "start_time": "2024-05-28T05:10:34.945083",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(208, 61)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sonar_data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a367e58",
   "metadata": {
    "papermill": {
     "duration": 0.02711,
     "end_time": "2024-05-28T05:10:35.038630",
     "exception": false,
     "start_time": "2024-05-28T05:10:35.011520",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "I check these data for any NAs (missing values), which I will remove from these data if found. I did not find NAs impeding these data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f5aba46d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:35.095018Z",
     "iopub.status.busy": "2024-05-28T05:10:35.093741Z",
     "iopub.status.idle": "2024-05-28T05:10:35.123754Z",
     "shell.execute_reply": "2024-05-28T05:10:35.121613Z"
    },
    "papermill": {
     "duration": 0.061302,
     "end_time": "2024-05-28T05:10:35.126765",
     "exception": false,
     "start_time": "2024-05-28T05:10:35.065463",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 208 entries, 0 to 207\n",
      "Data columns (total 61 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   0       208 non-null    float64\n",
      " 1   1       208 non-null    float64\n",
      " 2   2       208 non-null    float64\n",
      " 3   3       208 non-null    float64\n",
      " 4   4       208 non-null    float64\n",
      " 5   5       208 non-null    float64\n",
      " 6   6       208 non-null    float64\n",
      " 7   7       208 non-null    float64\n",
      " 8   8       208 non-null    float64\n",
      " 9   9       208 non-null    float64\n",
      " 10  10      208 non-null    float64\n",
      " 11  11      208 non-null    float64\n",
      " 12  12      208 non-null    float64\n",
      " 13  13      208 non-null    float64\n",
      " 14  14      208 non-null    float64\n",
      " 15  15      208 non-null    float64\n",
      " 16  16      208 non-null    float64\n",
      " 17  17      208 non-null    float64\n",
      " 18  18      208 non-null    float64\n",
      " 19  19      208 non-null    float64\n",
      " 20  20      208 non-null    float64\n",
      " 21  21      208 non-null    float64\n",
      " 22  22      208 non-null    float64\n",
      " 23  23      208 non-null    float64\n",
      " 24  24      208 non-null    float64\n",
      " 25  25      208 non-null    float64\n",
      " 26  26      208 non-null    float64\n",
      " 27  27      208 non-null    float64\n",
      " 28  28      208 non-null    float64\n",
      " 29  29      208 non-null    float64\n",
      " 30  30      208 non-null    float64\n",
      " 31  31      208 non-null    float64\n",
      " 32  32      208 non-null    float64\n",
      " 33  33      208 non-null    float64\n",
      " 34  34      208 non-null    float64\n",
      " 35  35      208 non-null    float64\n",
      " 36  36      208 non-null    float64\n",
      " 37  37      208 non-null    float64\n",
      " 38  38      208 non-null    float64\n",
      " 39  39      208 non-null    float64\n",
      " 40  40      208 non-null    float64\n",
      " 41  41      208 non-null    float64\n",
      " 42  42      208 non-null    float64\n",
      " 43  43      208 non-null    float64\n",
      " 44  44      208 non-null    float64\n",
      " 45  45      208 non-null    float64\n",
      " 46  46      208 non-null    float64\n",
      " 47  47      208 non-null    float64\n",
      " 48  48      208 non-null    float64\n",
      " 49  49      208 non-null    float64\n",
      " 50  50      208 non-null    float64\n",
      " 51  51      208 non-null    float64\n",
      " 52  52      208 non-null    float64\n",
      " 53  53      208 non-null    float64\n",
      " 54  54      208 non-null    float64\n",
      " 55  55      208 non-null    float64\n",
      " 56  56      208 non-null    float64\n",
      " 57  57      208 non-null    float64\n",
      " 58  58      208 non-null    float64\n",
      " 59  59      208 non-null    float64\n",
      " 60  60      208 non-null    object \n",
      "dtypes: float64(60), object(1)\n",
      "memory usage: 99.2+ KB\n"
     ]
    }
   ],
   "source": [
    "sonar_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e22065e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:35.184090Z",
     "iopub.status.busy": "2024-05-28T05:10:35.183574Z",
     "iopub.status.idle": "2024-05-28T05:10:35.194258Z",
     "shell.execute_reply": "2024-05-28T05:10:35.193343Z"
    },
    "papermill": {
     "duration": 0.042874,
     "end_time": "2024-05-28T05:10:35.196783",
     "exception": false,
     "start_time": "2024-05-28T05:10:35.153909",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     0\n",
       "1     0\n",
       "2     0\n",
       "3     0\n",
       "4     0\n",
       "     ..\n",
       "56    0\n",
       "57    0\n",
       "58    0\n",
       "59    0\n",
       "60    0\n",
       "Length: 61, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#NAs\n",
    "sonar_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0361efef",
   "metadata": {
    "papermill": {
     "duration": 0.027536,
     "end_time": "2024-05-28T05:10:35.251905",
     "exception": false,
     "start_time": "2024-05-28T05:10:35.224369",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "I am curious about the distribution of these data across the classes Metal Cylinder/Mine (M) and Rock (R), and find there appear to be more Mines detected than Rocks, but only by 14 samples (111 Mines and 97 Rocks). Meaning, the distribution is relatively representative for each class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "98aa7cba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:35.310254Z",
     "iopub.status.busy": "2024-05-28T05:10:35.309835Z",
     "iopub.status.idle": "2024-05-28T05:10:35.320137Z",
     "shell.execute_reply": "2024-05-28T05:10:35.318806Z"
    },
    "papermill": {
     "duration": 0.041895,
     "end_time": "2024-05-28T05:10:35.322783",
     "exception": false,
     "start_time": "2024-05-28T05:10:35.280888",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "M    111\n",
       "R     97\n",
       "Name: 60, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sonar_data[60].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4ec8a252",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:35.379869Z",
     "iopub.status.busy": "2024-05-28T05:10:35.379429Z",
     "iopub.status.idle": "2024-05-28T05:10:35.389085Z",
     "shell.execute_reply": "2024-05-28T05:10:35.387614Z"
    },
    "papermill": {
     "duration": 0.041469,
     "end_time": "2024-05-28T05:10:35.391831",
     "exception": false,
     "start_time": "2024-05-28T05:10:35.350362",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "M    111\n",
       "R     97\n",
       "Name: 60, dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sonar_data[60].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "467581be",
   "metadata": {
    "papermill": {
     "duration": 0.028251,
     "end_time": "2024-05-28T05:10:35.447979",
     "exception": false,
     "start_time": "2024-05-28T05:10:35.419728",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "I explored individual data distributions/ranges for each feature to determine if these data need to be standardized/normalized. Here, I determine normalization is necessary as the features exhibit variation in their distrubitions and are not yet centralized around 0. The need for normalization appears to be a critical pre-processing step for these data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "66891a78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:35.505367Z",
     "iopub.status.busy": "2024-05-28T05:10:35.504892Z",
     "iopub.status.idle": "2024-05-28T05:10:44.388562Z",
     "shell.execute_reply": "2024-05-28T05:10:44.387161Z"
    },
    "papermill": {
     "duration": 8.916782,
     "end_time": "2024-05-28T05:10:44.392836",
     "exception": false,
     "start_time": "2024-05-28T05:10:35.476054",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x1000 with 60 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Exploring normalization and standardization\n",
    "plt.figure(figsize=(15, 10))\n",
    "for i in range(60):\n",
    "    plt.subplot(6, 10, i + 1)\n",
    "    plt.hist(sonar_data[i], bins=20, color='purple', alpha=0.7)\n",
    "    plt.title(f'Feature {i}')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b42bb0a2",
   "metadata": {
    "papermill": {
     "duration": 0.029028,
     "end_time": "2024-05-28T05:10:44.451846",
     "exception": false,
     "start_time": "2024-05-28T05:10:44.422818",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### After exploring this sonar data set, we know that:\n",
    "\n",
    "- There are 208 samples, each representing either a rock or a metal cylinder detected with underwater sonar equipment.\n",
    "- There are 60 conceptual features in the data set, the sonar units which were clamped to the amplitude value of the signal to be classified.\n",
    "- The features are all numeric, and each have their own distinct measures, ranges and distributions (ranging from 0.0 to 1.0).\n",
    "- There are no missing values/ NAs.\n",
    "- Each number represents the energy within a particular frequency band, integrated over a set time frame.\n",
    "- The sonar detection represents the class label for each underwater item determination, indicated by an 'M' for Metal Cylinder/Mine or a 'R' for Rock.\n",
    "- These data require normalization to meet model assumptions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "390d68e4",
   "metadata": {
    "papermill": {
     "duration": 0.02902,
     "end_time": "2024-05-28T05:10:44.510196",
     "exception": false,
     "start_time": "2024-05-28T05:10:44.481176",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 3: Preprocess the Data\n",
    "\n",
    "For preprocessing, I do not need to transform the class labels into numbers, because the SVC model does it automatically. \n",
    "\n",
    "I will separate the features (`X`) and class labels (`y`). I will apply scaling to these data with z-score normalization, using the scikit-learn StandardScalar making normalization easily accomplished (using \"fit_transform\")."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72e0746c",
   "metadata": {
    "papermill": {
     "duration": 0.028941,
     "end_time": "2024-05-28T05:10:44.568474",
     "exception": false,
     "start_time": "2024-05-28T05:10:44.539533",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "First, as typical, I import the required library."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0126a270",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:44.629382Z",
     "iopub.status.busy": "2024-05-28T05:10:44.628909Z",
     "iopub.status.idle": "2024-05-28T05:10:45.614710Z",
     "shell.execute_reply": "2024-05-28T05:10:45.613373Z"
    },
    "papermill": {
     "duration": 1.020394,
     "end_time": "2024-05-28T05:10:45.618240",
     "exception": false,
     "start_time": "2024-05-28T05:10:44.597846",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d678021c",
   "metadata": {
    "papermill": {
     "duration": 0.038637,
     "end_time": "2024-05-28T05:10:45.689412",
     "exception": false,
     "start_time": "2024-05-28T05:10:45.650775",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "I then work to separate the class labels (last column) from the features (accompanying data)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0b1f9d5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:45.757812Z",
     "iopub.status.busy": "2024-05-28T05:10:45.757366Z",
     "iopub.status.idle": "2024-05-28T05:10:45.765217Z",
     "shell.execute_reply": "2024-05-28T05:10:45.763866Z"
    },
    "papermill": {
     "duration": 0.041996,
     "end_time": "2024-05-28T05:10:45.768018",
     "exception": false,
     "start_time": "2024-05-28T05:10:45.726022",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = sonar_data.iloc[:, :-1]  # all columns except the class column (last)\n",
    "y = sonar_data.iloc[:, -1]   # the class column"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22b81f9e",
   "metadata": {
    "papermill": {
     "duration": 0.030093,
     "end_time": "2024-05-28T05:10:45.828181",
     "exception": false,
     "start_time": "2024-05-28T05:10:45.798088",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "I am doing a quick check to ensure these were successfully seperated, and this does appear to be correct."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "89c64d65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:45.892103Z",
     "iopub.status.busy": "2024-05-28T05:10:45.891611Z",
     "iopub.status.idle": "2024-05-28T05:10:45.924547Z",
     "shell.execute_reply": "2024-05-28T05:10:45.922815Z"
    },
    "papermill": {
     "duration": 0.068723,
     "end_time": "2024-05-28T05:10:45.927765",
     "exception": false,
     "start_time": "2024-05-28T05:10:45.859042",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>50</th>\n",
       "      <th>51</th>\n",
       "      <th>52</th>\n",
       "      <th>53</th>\n",
       "      <th>54</th>\n",
       "      <th>55</th>\n",
       "      <th>56</th>\n",
       "      <th>57</th>\n",
       "      <th>58</th>\n",
       "      <th>59</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0200</td>\n",
       "      <td>0.0371</td>\n",
       "      <td>0.0428</td>\n",
       "      <td>0.0207</td>\n",
       "      <td>0.0954</td>\n",
       "      <td>0.0986</td>\n",
       "      <td>0.1539</td>\n",
       "      <td>0.1601</td>\n",
       "      <td>0.3109</td>\n",
       "      <td>0.2111</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0232</td>\n",
       "      <td>0.0027</td>\n",
       "      <td>0.0065</td>\n",
       "      <td>0.0159</td>\n",
       "      <td>0.0072</td>\n",
       "      <td>0.0167</td>\n",
       "      <td>0.0180</td>\n",
       "      <td>0.0084</td>\n",
       "      <td>0.0090</td>\n",
       "      <td>0.0032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0453</td>\n",
       "      <td>0.0523</td>\n",
       "      <td>0.0843</td>\n",
       "      <td>0.0689</td>\n",
       "      <td>0.1183</td>\n",
       "      <td>0.2583</td>\n",
       "      <td>0.2156</td>\n",
       "      <td>0.3481</td>\n",
       "      <td>0.3337</td>\n",
       "      <td>0.2872</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0125</td>\n",
       "      <td>0.0084</td>\n",
       "      <td>0.0089</td>\n",
       "      <td>0.0048</td>\n",
       "      <td>0.0094</td>\n",
       "      <td>0.0191</td>\n",
       "      <td>0.0140</td>\n",
       "      <td>0.0049</td>\n",
       "      <td>0.0052</td>\n",
       "      <td>0.0044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0262</td>\n",
       "      <td>0.0582</td>\n",
       "      <td>0.1099</td>\n",
       "      <td>0.1083</td>\n",
       "      <td>0.0974</td>\n",
       "      <td>0.2280</td>\n",
       "      <td>0.2431</td>\n",
       "      <td>0.3771</td>\n",
       "      <td>0.5598</td>\n",
       "      <td>0.6194</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0033</td>\n",
       "      <td>0.0232</td>\n",
       "      <td>0.0166</td>\n",
       "      <td>0.0095</td>\n",
       "      <td>0.0180</td>\n",
       "      <td>0.0244</td>\n",
       "      <td>0.0316</td>\n",
       "      <td>0.0164</td>\n",
       "      <td>0.0095</td>\n",
       "      <td>0.0078</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0100</td>\n",
       "      <td>0.0171</td>\n",
       "      <td>0.0623</td>\n",
       "      <td>0.0205</td>\n",
       "      <td>0.0205</td>\n",
       "      <td>0.0368</td>\n",
       "      <td>0.1098</td>\n",
       "      <td>0.1276</td>\n",
       "      <td>0.0598</td>\n",
       "      <td>0.1264</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0241</td>\n",
       "      <td>0.0121</td>\n",
       "      <td>0.0036</td>\n",
       "      <td>0.0150</td>\n",
       "      <td>0.0085</td>\n",
       "      <td>0.0073</td>\n",
       "      <td>0.0050</td>\n",
       "      <td>0.0044</td>\n",
       "      <td>0.0040</td>\n",
       "      <td>0.0117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0762</td>\n",
       "      <td>0.0666</td>\n",
       "      <td>0.0481</td>\n",
       "      <td>0.0394</td>\n",
       "      <td>0.0590</td>\n",
       "      <td>0.0649</td>\n",
       "      <td>0.1209</td>\n",
       "      <td>0.2467</td>\n",
       "      <td>0.3564</td>\n",
       "      <td>0.4459</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0156</td>\n",
       "      <td>0.0031</td>\n",
       "      <td>0.0054</td>\n",
       "      <td>0.0105</td>\n",
       "      <td>0.0110</td>\n",
       "      <td>0.0015</td>\n",
       "      <td>0.0072</td>\n",
       "      <td>0.0048</td>\n",
       "      <td>0.0107</td>\n",
       "      <td>0.0094</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 60 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       0       1       2       3       4       5       6       7       8   \\\n",
       "0  0.0200  0.0371  0.0428  0.0207  0.0954  0.0986  0.1539  0.1601  0.3109   \n",
       "1  0.0453  0.0523  0.0843  0.0689  0.1183  0.2583  0.2156  0.3481  0.3337   \n",
       "2  0.0262  0.0582  0.1099  0.1083  0.0974  0.2280  0.2431  0.3771  0.5598   \n",
       "3  0.0100  0.0171  0.0623  0.0205  0.0205  0.0368  0.1098  0.1276  0.0598   \n",
       "4  0.0762  0.0666  0.0481  0.0394  0.0590  0.0649  0.1209  0.2467  0.3564   \n",
       "\n",
       "       9   ...      50      51      52      53      54      55      56  \\\n",
       "0  0.2111  ...  0.0232  0.0027  0.0065  0.0159  0.0072  0.0167  0.0180   \n",
       "1  0.2872  ...  0.0125  0.0084  0.0089  0.0048  0.0094  0.0191  0.0140   \n",
       "2  0.6194  ...  0.0033  0.0232  0.0166  0.0095  0.0180  0.0244  0.0316   \n",
       "3  0.1264  ...  0.0241  0.0121  0.0036  0.0150  0.0085  0.0073  0.0050   \n",
       "4  0.4459  ...  0.0156  0.0031  0.0054  0.0105  0.0110  0.0015  0.0072   \n",
       "\n",
       "       57      58      59  \n",
       "0  0.0084  0.0090  0.0032  \n",
       "1  0.0049  0.0052  0.0044  \n",
       "2  0.0164  0.0095  0.0078  \n",
       "3  0.0044  0.0040  0.0117  \n",
       "4  0.0048  0.0107  0.0094  \n",
       "\n",
       "[5 rows x 60 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3ca4f5aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:45.991014Z",
     "iopub.status.busy": "2024-05-28T05:10:45.990576Z",
     "iopub.status.idle": "2024-05-28T05:10:45.999865Z",
     "shell.execute_reply": "2024-05-28T05:10:45.998546Z"
    },
    "papermill": {
     "duration": 0.044318,
     "end_time": "2024-05-28T05:10:46.002475",
     "exception": false,
     "start_time": "2024-05-28T05:10:45.958157",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    R\n",
       "1    R\n",
       "2    R\n",
       "3    R\n",
       "4    R\n",
       "Name: 60, dtype: object"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc9a7623",
   "metadata": {
    "papermill": {
     "duration": 0.030026,
     "end_time": "2024-05-28T05:10:46.063099",
     "exception": false,
     "start_time": "2024-05-28T05:10:46.033073",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Scaling is applied to these data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "304274d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:46.125908Z",
     "iopub.status.busy": "2024-05-28T05:10:46.125459Z",
     "iopub.status.idle": "2024-05-28T05:10:46.131636Z",
     "shell.execute_reply": "2024-05-28T05:10:46.129975Z"
    },
    "papermill": {
     "duration": 0.041179,
     "end_time": "2024-05-28T05:10:46.134158",
     "exception": false,
     "start_time": "2024-05-28T05:10:46.092979",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "scaler = StandardScaler()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a444db13",
   "metadata": {
    "papermill": {
     "duration": 0.030344,
     "end_time": "2024-05-28T05:10:46.194487",
     "exception": false,
     "start_time": "2024-05-28T05:10:46.164143",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Next, I use scaling for z-score normalization by applying the scikit-learn StandardScalar (using \"fit_transform\")."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7402bb5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:46.258018Z",
     "iopub.status.busy": "2024-05-28T05:10:46.257553Z",
     "iopub.status.idle": "2024-05-28T05:10:46.268331Z",
     "shell.execute_reply": "2024-05-28T05:10:46.267162Z"
    },
    "papermill": {
     "duration": 0.045376,
     "end_time": "2024-05-28T05:10:46.271160",
     "exception": false,
     "start_time": "2024-05-28T05:10:46.225784",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_scaled = scaler.fit_transform(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65afdb55",
   "metadata": {
    "papermill": {
     "duration": 0.032375,
     "end_time": "2024-05-28T05:10:46.335704",
     "exception": false,
     "start_time": "2024-05-28T05:10:46.303329",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "I create a new dataframe for these scaled features for X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "32ae0658",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:46.399415Z",
     "iopub.status.busy": "2024-05-28T05:10:46.398962Z",
     "iopub.status.idle": "2024-05-28T05:10:46.405489Z",
     "shell.execute_reply": "2024-05-28T05:10:46.404004Z"
    },
    "papermill": {
     "duration": 0.041771,
     "end_time": "2024-05-28T05:10:46.408930",
     "exception": false,
     "start_time": "2024-05-28T05:10:46.367159",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_scaled_df = pd.DataFrame(X_scaled, columns=X.columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01f81ab5",
   "metadata": {
    "papermill": {
     "duration": 0.030031,
     "end_time": "2024-05-28T05:10:46.470497",
     "exception": false,
     "start_time": "2024-05-28T05:10:46.440466",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Another quick check to make sure everything is still smoothly operating (as expected)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3e1c25da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:46.533067Z",
     "iopub.status.busy": "2024-05-28T05:10:46.532618Z",
     "iopub.status.idle": "2024-05-28T05:10:46.562163Z",
     "shell.execute_reply": "2024-05-28T05:10:46.560797Z"
    },
    "papermill": {
     "duration": 0.065007,
     "end_time": "2024-05-28T05:10:46.565526",
     "exception": false,
     "start_time": "2024-05-28T05:10:46.500519",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>50</th>\n",
       "      <th>51</th>\n",
       "      <th>52</th>\n",
       "      <th>53</th>\n",
       "      <th>54</th>\n",
       "      <th>55</th>\n",
       "      <th>56</th>\n",
       "      <th>57</th>\n",
       "      <th>58</th>\n",
       "      <th>59</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.399551</td>\n",
       "      <td>-0.040648</td>\n",
       "      <td>-0.026926</td>\n",
       "      <td>-0.715105</td>\n",
       "      <td>0.364456</td>\n",
       "      <td>-0.101253</td>\n",
       "      <td>0.521638</td>\n",
       "      <td>0.297843</td>\n",
       "      <td>1.125272</td>\n",
       "      <td>0.021186</td>\n",
       "      <td>...</td>\n",
       "      <td>0.595283</td>\n",
       "      <td>-1.115432</td>\n",
       "      <td>-0.597604</td>\n",
       "      <td>0.680897</td>\n",
       "      <td>-0.295646</td>\n",
       "      <td>1.481635</td>\n",
       "      <td>1.763784</td>\n",
       "      <td>0.069870</td>\n",
       "      <td>0.171678</td>\n",
       "      <td>-0.658947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.703538</td>\n",
       "      <td>0.421630</td>\n",
       "      <td>1.055618</td>\n",
       "      <td>0.323330</td>\n",
       "      <td>0.777676</td>\n",
       "      <td>2.607217</td>\n",
       "      <td>1.522625</td>\n",
       "      <td>2.510982</td>\n",
       "      <td>1.318325</td>\n",
       "      <td>0.588706</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.297902</td>\n",
       "      <td>-0.522349</td>\n",
       "      <td>-0.256857</td>\n",
       "      <td>-0.843151</td>\n",
       "      <td>0.015503</td>\n",
       "      <td>1.901046</td>\n",
       "      <td>1.070732</td>\n",
       "      <td>-0.472406</td>\n",
       "      <td>-0.444554</td>\n",
       "      <td>-0.419852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.129229</td>\n",
       "      <td>0.601067</td>\n",
       "      <td>1.723404</td>\n",
       "      <td>1.172176</td>\n",
       "      <td>0.400545</td>\n",
       "      <td>2.093337</td>\n",
       "      <td>1.968770</td>\n",
       "      <td>2.852370</td>\n",
       "      <td>3.232767</td>\n",
       "      <td>3.066105</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.065875</td>\n",
       "      <td>1.017585</td>\n",
       "      <td>0.836373</td>\n",
       "      <td>-0.197833</td>\n",
       "      <td>1.231812</td>\n",
       "      <td>2.827246</td>\n",
       "      <td>4.120162</td>\n",
       "      <td>1.309360</td>\n",
       "      <td>0.252761</td>\n",
       "      <td>0.257582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.835555</td>\n",
       "      <td>-0.648910</td>\n",
       "      <td>0.481740</td>\n",
       "      <td>-0.719414</td>\n",
       "      <td>-0.987079</td>\n",
       "      <td>-1.149364</td>\n",
       "      <td>-0.193816</td>\n",
       "      <td>-0.084747</td>\n",
       "      <td>-1.000852</td>\n",
       "      <td>-0.610469</td>\n",
       "      <td>...</td>\n",
       "      <td>0.670411</td>\n",
       "      <td>-0.137365</td>\n",
       "      <td>-1.009341</td>\n",
       "      <td>0.557326</td>\n",
       "      <td>-0.111785</td>\n",
       "      <td>-0.161060</td>\n",
       "      <td>-0.488635</td>\n",
       "      <td>-0.549875</td>\n",
       "      <td>-0.639154</td>\n",
       "      <td>1.034640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.050790</td>\n",
       "      <td>0.856537</td>\n",
       "      <td>0.111327</td>\n",
       "      <td>-0.312227</td>\n",
       "      <td>-0.292365</td>\n",
       "      <td>-0.672796</td>\n",
       "      <td>-0.013735</td>\n",
       "      <td>1.317299</td>\n",
       "      <td>1.510531</td>\n",
       "      <td>1.772220</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.039129</td>\n",
       "      <td>-1.073812</td>\n",
       "      <td>-0.753780</td>\n",
       "      <td>-0.060532</td>\n",
       "      <td>0.241793</td>\n",
       "      <td>-1.174638</td>\n",
       "      <td>-0.107456</td>\n",
       "      <td>-0.487900</td>\n",
       "      <td>0.447361</td>\n",
       "      <td>0.576375</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 60 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         0         1         2         3         4         5         6   \\\n",
       "0 -0.399551 -0.040648 -0.026926 -0.715105  0.364456 -0.101253  0.521638   \n",
       "1  0.703538  0.421630  1.055618  0.323330  0.777676  2.607217  1.522625   \n",
       "2 -0.129229  0.601067  1.723404  1.172176  0.400545  2.093337  1.968770   \n",
       "3 -0.835555 -0.648910  0.481740 -0.719414 -0.987079 -1.149364 -0.193816   \n",
       "4  2.050790  0.856537  0.111327 -0.312227 -0.292365 -0.672796 -0.013735   \n",
       "\n",
       "         7         8         9   ...        50        51        52        53  \\\n",
       "0  0.297843  1.125272  0.021186  ...  0.595283 -1.115432 -0.597604  0.680897   \n",
       "1  2.510982  1.318325  0.588706  ... -0.297902 -0.522349 -0.256857 -0.843151   \n",
       "2  2.852370  3.232767  3.066105  ... -1.065875  1.017585  0.836373 -0.197833   \n",
       "3 -0.084747 -1.000852 -0.610469  ...  0.670411 -0.137365 -1.009341  0.557326   \n",
       "4  1.317299  1.510531  1.772220  ... -0.039129 -1.073812 -0.753780 -0.060532   \n",
       "\n",
       "         54        55        56        57        58        59  \n",
       "0 -0.295646  1.481635  1.763784  0.069870  0.171678 -0.658947  \n",
       "1  0.015503  1.901046  1.070732 -0.472406 -0.444554 -0.419852  \n",
       "2  1.231812  2.827246  4.120162  1.309360  0.252761  0.257582  \n",
       "3 -0.111785 -0.161060 -0.488635 -0.549875 -0.639154  1.034640  \n",
       "4  0.241793 -1.174638 -0.107456 -0.487900  0.447361  0.576375  \n",
       "\n",
       "[5 rows x 60 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_scaled_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "728b8d2b",
   "metadata": {
    "papermill": {
     "duration": 0.030565,
     "end_time": "2024-05-28T05:10:46.627032",
     "exception": false,
     "start_time": "2024-05-28T05:10:46.596467",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "To summarize, at this point in our process, we have successfully seperated the X (features) and Y (classes). We scaled these data and transformed them to meet normalization assumptions required for modeling accuracy. We created a new dataframe we can use for generating the test and train sets, and for use in the predictive modeling. We are now finished with exploring and pre-processing these data - we are ready to begin training our SVM model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0a62719",
   "metadata": {
    "papermill": {
     "duration": 0.032201,
     "end_time": "2024-05-28T05:10:46.690082",
     "exception": false,
     "start_time": "2024-05-28T05:10:46.657881",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 4: Prepare the Training and Test Data Sets\n",
    "\n",
    "Using the`train_test_split` approach, I passed these normalized sonar data features with to 80% training set, and 20% to the testing set. The random state was arbitarily selected at \"50\" based on online examples, but is essentially determining where the split will occur each time in these data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9fcc1da0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:46.752673Z",
     "iopub.status.busy": "2024-05-28T05:10:46.752163Z",
     "iopub.status.idle": "2024-05-28T05:10:46.833879Z",
     "shell.execute_reply": "2024-05-28T05:10:46.832630Z"
    },
    "papermill": {
     "duration": 0.116466,
     "end_time": "2024-05-28T05:10:46.836936",
     "exception": false,
     "start_time": "2024-05-28T05:10:46.720470",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_scaled_df, y, test_size=0.20, random_state=50)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00eedc51",
   "metadata": {
    "papermill": {
     "duration": 0.030088,
     "end_time": "2024-05-28T05:10:46.898075",
     "exception": false,
     "start_time": "2024-05-28T05:10:46.867987",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This step is brief but crucial. We have assigned 20% of these data to a test set, and the remaining 80% will be used to train the SVM model. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c3a5326",
   "metadata": {
    "papermill": {
     "duration": 0.029807,
     "end_time": "2024-05-28T05:10:46.958697",
     "exception": false,
     "start_time": "2024-05-28T05:10:46.928890",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 5: Instantiate and Configure an SVM\n",
    "\n",
    "After splitting these data into train and test sets (accomplished after preprocessing the data by normalizing the features and separating them from the corresponding class labels), we instantiated an SVM model with a default Radial Basis Function **(RBF kernel)**. The kernal is a function that is used to fit data in three dimensional space, which may have otherwise been challenging to linearly seperate (i.e. the kernel function facilitates nonlinear classification and regression, by mapping features to a higher dimensional space)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92803d60",
   "metadata": {
    "papermill": {
     "duration": 0.029744,
     "end_time": "2024-05-28T05:10:47.019144",
     "exception": false,
     "start_time": "2024-05-28T05:10:46.989400",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Of course, we prepare our necessary library for the instantiation and configuration of the SVM."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "bf58271f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:47.084259Z",
     "iopub.status.busy": "2024-05-28T05:10:47.083362Z",
     "iopub.status.idle": "2024-05-28T05:10:47.190102Z",
     "shell.execute_reply": "2024-05-28T05:10:47.188620Z"
    },
    "papermill": {
     "duration": 0.142513,
     "end_time": "2024-05-28T05:10:47.193464",
     "exception": false,
     "start_time": "2024-05-28T05:10:47.050951",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.svm import SVC\n",
    "from sklearn import svm\n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9387e36",
   "metadata": {
    "papermill": {
     "duration": 0.030904,
     "end_time": "2024-05-28T05:10:47.255706",
     "exception": false,
     "start_time": "2024-05-28T05:10:47.224802",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Instantiating the classifer using default hyperparameters, which include:\n",
    "\n",
    "**class sklearn.svm.SVC**(*, C=1.0, kernel='rbf', degree=3, gamma='scale', coef0=0.0, shrinking=True, probability=False, tol=0.001, cache_size=200, class_weight=None, verbose=False, max_iter=-1, decision_function_shape='ovr', break_ties=False, random_state=None)**\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f2e7860",
   "metadata": {
    "papermill": {
     "duration": 0.030598,
     "end_time": "2024-05-28T05:10:47.316770",
     "exception": false,
     "start_time": "2024-05-28T05:10:47.286172",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We start with selecting the default for the SVC model, which sets the RBF kernel, C=1.0 (regularization parameter) and gamma scale."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2e02e29e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:47.379477Z",
     "iopub.status.busy": "2024-05-28T05:10:47.379014Z",
     "iopub.status.idle": "2024-05-28T05:10:47.385435Z",
     "shell.execute_reply": "2024-05-28T05:10:47.384157Z"
    },
    "papermill": {
     "duration": 0.040902,
     "end_time": "2024-05-28T05:10:47.388117",
     "exception": false,
     "start_time": "2024-05-28T05:10:47.347215",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Instantiate and configure\n",
    "svm_model = SVC()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e43f4ca",
   "metadata": {
    "papermill": {
     "duration": 0.030019,
     "end_time": "2024-05-28T05:10:47.449027",
     "exception": false,
     "start_time": "2024-05-28T05:10:47.419008",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 6: Train the SVM"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5b35904",
   "metadata": {
    "papermill": {
     "duration": 0.030011,
     "end_time": "2024-05-28T05:10:47.510001",
     "exception": false,
     "start_time": "2024-05-28T05:10:47.479990",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "By fitting the SVM to the training data, it can  learn (and predict) the underlying patterns and correlations within the features (X train set). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "08ce4a29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:47.572547Z",
     "iopub.status.busy": "2024-05-28T05:10:47.572070Z",
     "iopub.status.idle": "2024-05-28T05:10:47.592862Z",
     "shell.execute_reply": "2024-05-28T05:10:47.591554Z"
    },
    "papermill": {
     "duration": 0.05564,
     "end_time": "2024-05-28T05:10:47.595898",
     "exception": false,
     "start_time": "2024-05-28T05:10:47.540258",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC()"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svm_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2d55e3f",
   "metadata": {
    "papermill": {
     "duration": 0.030339,
     "end_time": "2024-05-28T05:10:47.657043",
     "exception": false,
     "start_time": "2024-05-28T05:10:47.626704",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "It's important to be aware that the training is accuring with default setting applied from the SVC() standards in the skikit-learn package. Once we validate and explore the accuracy score and output, we can adjust these parameters to better suite the model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6875f36",
   "metadata": {
    "papermill": {
     "duration": 0.030247,
     "end_time": "2024-05-28T05:10:47.719318",
     "exception": false,
     "start_time": "2024-05-28T05:10:47.689071",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 7: Validate and Test the SVM\n",
    "\n",
    "By fitting the SVM to the training data and using the predict() function from sklearn, we are able to use the generated predictions for class labels to measure model succes. We previously trained the model, allowing it to learn patterns and correlations within the X features. Here, we evaluate the model's predictive performance with evaluation metrics. These metrics, including accuracy, precision, recall, and F1-score, providing a guide towards model opitmization.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2e4c7c3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:47.784217Z",
     "iopub.status.busy": "2024-05-28T05:10:47.782859Z",
     "iopub.status.idle": "2024-05-28T05:10:47.789975Z",
     "shell.execute_reply": "2024-05-28T05:10:47.788242Z"
    },
    "papermill": {
     "duration": 0.042346,
     "end_time": "2024-05-28T05:10:47.792828",
     "exception": false,
     "start_time": "2024-05-28T05:10:47.750482",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import classification_report, confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "732e2f6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:47.857169Z",
     "iopub.status.busy": "2024-05-28T05:10:47.856340Z",
     "iopub.status.idle": "2024-05-28T05:10:47.864694Z",
     "shell.execute_reply": "2024-05-28T05:10:47.863530Z"
    },
    "papermill": {
     "duration": 0.043994,
     "end_time": "2024-05-28T05:10:47.867575",
     "exception": false,
     "start_time": "2024-05-28T05:10:47.823581",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Predict class labels for the test set\n",
    "y_pred = svm_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "38a7d9d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:47.933765Z",
     "iopub.status.busy": "2024-05-28T05:10:47.932891Z",
     "iopub.status.idle": "2024-05-28T05:10:47.941075Z",
     "shell.execute_reply": "2024-05-28T05:10:47.939367Z"
    },
    "papermill": {
     "duration": 0.043905,
     "end_time": "2024-05-28T05:10:47.943858",
     "exception": false,
     "start_time": "2024-05-28T05:10:47.899953",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8571428571428571\n"
     ]
    }
   ],
   "source": [
    "# Calculate accuracy\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(\"Accuracy:\", accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "cedea25a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:48.008713Z",
     "iopub.status.busy": "2024-05-28T05:10:48.008229Z",
     "iopub.status.idle": "2024-05-28T05:10:48.022498Z",
     "shell.execute_reply": "2024-05-28T05:10:48.020674Z"
    },
    "papermill": {
     "duration": 0.050772,
     "end_time": "2024-05-28T05:10:48.026077",
     "exception": false,
     "start_time": "2024-05-28T05:10:47.975305",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           M       0.96      0.81      0.88        27\n",
      "           R       0.74      0.93      0.82        15\n",
      "\n",
      "    accuracy                           0.86        42\n",
      "   macro avg       0.85      0.87      0.85        42\n",
      "weighted avg       0.88      0.86      0.86        42\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Calculate precision, recall, and F1-score\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "68205505",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:48.091060Z",
     "iopub.status.busy": "2024-05-28T05:10:48.090566Z",
     "iopub.status.idle": "2024-05-28T05:10:48.101881Z",
     "shell.execute_reply": "2024-05-28T05:10:48.100378Z"
    },
    "papermill": {
     "duration": 0.047093,
     "end_time": "2024-05-28T05:10:48.105065",
     "exception": false,
     "start_time": "2024-05-28T05:10:48.057972",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on test set: 0.8571428571428571\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# Compute accuracy score for X_test\n",
    "y_pred = svm_model.predict(X_test)\n",
    "accuracy_test = accuracy_score(y_test, y_pred)\n",
    "print(\"Accuracy on test set:\", accuracy_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa342b04",
   "metadata": {
    "papermill": {
     "duration": 0.03099,
     "end_time": "2024-05-28T05:10:48.167032",
     "exception": false,
     "start_time": "2024-05-28T05:10:48.136042",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Generally, the results look promising, as our accuracy score suggests that the SVM is fitting these data with a **85.7%** accuracy. However, we must test the model on data the model has never seen in order to apply it successfully to real-life scenerios."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f507537d",
   "metadata": {
    "papermill": {
     "duration": 0.031139,
     "end_time": "2024-05-28T05:10:48.229261",
     "exception": false,
     "start_time": "2024-05-28T05:10:48.198122",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "By fitting the SVM to the training data, we allowed it to learn the underlying patterns and relationships within the features. Subsequently, we evaluated the model's performance on unseen data by predicting class labels for the testing set and computing various evaluation metrics, such as the accuracy score, precision, recall and f1-score. These metrics provide insights into how well the model fits to new instances/epochs. We now have a point of comparison for tuning and future evaluation (and improvements)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d14453b",
   "metadata": {
    "papermill": {
     "duration": 0.030608,
     "end_time": "2024-05-28T05:10:48.290826",
     "exception": false,
     "start_time": "2024-05-28T05:10:48.260218",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 8: Demonstrate Making Predictions\n",
    "\n",
    "We know we have a fairly well fit SVM model, which is able to generate predictions with an accuracy score of roughly 85.7%. We can now demonstrate it's prediction ability by exposing the model to new, random data. In order to accomplish this, I need to generate a random data set (sharing the same dimensions), and examine the predictive nature of the SVM."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e919f6e0",
   "metadata": {
    "papermill": {
     "duration": 0.03046,
     "end_time": "2024-05-28T05:10:48.352258",
     "exception": false,
     "start_time": "2024-05-28T05:10:48.321798",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "As typical, first the required library is imported."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f86f12c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:48.416124Z",
     "iopub.status.busy": "2024-05-28T05:10:48.415705Z",
     "iopub.status.idle": "2024-05-28T05:10:48.421100Z",
     "shell.execute_reply": "2024-05-28T05:10:48.419536Z"
    },
    "papermill": {
     "duration": 0.041056,
     "end_time": "2024-05-28T05:10:48.424166",
     "exception": false,
     "start_time": "2024-05-28T05:10:48.383110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1645dd9",
   "metadata": {
    "papermill": {
     "duration": 0.045569,
     "end_time": "2024-05-28T05:10:48.500766",
     "exception": false,
     "start_time": "2024-05-28T05:10:48.455197",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Example data generation (n=100, dimension=60), for features (x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d1ac3993",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:48.564469Z",
     "iopub.status.busy": "2024-05-28T05:10:48.564016Z",
     "iopub.status.idle": "2024-05-28T05:10:48.570293Z",
     "shell.execute_reply": "2024-05-28T05:10:48.568915Z"
    },
    "papermill": {
     "duration": 0.041559,
     "end_time": "2024-05-28T05:10:48.573107",
     "exception": false,
     "start_time": "2024-05-28T05:10:48.531548",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_new = np.random.rand(100, 60)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ceadc2aa",
   "metadata": {
    "papermill": {
     "duration": 0.030458,
     "end_time": "2024-05-28T05:10:48.634163",
     "exception": false,
     "start_time": "2024-05-28T05:10:48.603705",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now, doing the same but for classifiers (y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "4eebd7b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:48.699071Z",
     "iopub.status.busy": "2024-05-28T05:10:48.698123Z",
     "iopub.status.idle": "2024-05-28T05:10:48.705658Z",
     "shell.execute_reply": "2024-05-28T05:10:48.704400Z"
    },
    "papermill": {
     "duration": 0.043243,
     "end_time": "2024-05-28T05:10:48.708268",
     "exception": false,
     "start_time": "2024-05-28T05:10:48.665025",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_new = np.random.choice(['R', 'M'], size=100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22f2dbf6",
   "metadata": {
    "papermill": {
     "duration": 0.030807,
     "end_time": "2024-05-28T05:10:48.770330",
     "exception": false,
     "start_time": "2024-05-28T05:10:48.739523",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Apply the SVM model we trained with our mines vs rocks data set (train, test sets)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "f11e94cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:48.833717Z",
     "iopub.status.busy": "2024-05-28T05:10:48.833265Z",
     "iopub.status.idle": "2024-05-28T05:10:48.840486Z",
     "shell.execute_reply": "2024-05-28T05:10:48.839363Z"
    },
    "papermill": {
     "duration": 0.042244,
     "end_time": "2024-05-28T05:10:48.843416",
     "exception": false,
     "start_time": "2024-05-28T05:10:48.801172",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "prediction = svm_model.predict(X_new)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6f15b8a",
   "metadata": {
    "papermill": {
     "duration": 0.030507,
     "end_time": "2024-05-28T05:10:48.905187",
     "exception": false,
     "start_time": "2024-05-28T05:10:48.874680",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Compute accuracy score for these random, new data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "15c20037",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:48.969585Z",
     "iopub.status.busy": "2024-05-28T05:10:48.968369Z",
     "iopub.status.idle": "2024-05-28T05:10:48.979007Z",
     "shell.execute_reply": "2024-05-28T05:10:48.977494Z"
    },
    "papermill": {
     "duration": 0.045783,
     "end_time": "2024-05-28T05:10:48.981703",
     "exception": false,
     "start_time": "2024-05-28T05:10:48.935920",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on test set: 0.45\n"
     ]
    }
   ],
   "source": [
    "y_pred_2 = svm_model.predict(X_new)\n",
    "accuracy_test = accuracy_score(y_new, y_pred_2)\n",
    "\n",
    "print(\"Accuracy on test set:\", accuracy_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f818a064",
   "metadata": {
    "papermill": {
     "duration": 0.031697,
     "end_time": "2024-05-28T05:10:49.044892",
     "exception": false,
     "start_time": "2024-05-28T05:10:49.013195",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Hm, we can see here that our accuracy score dropped to only **44%**, meaning for these randomly generated data the model is no better than guessing. This is OK, because these randomly generated values have no relateable pattern to our model. It's helpful to see this because; A.) our accuracy score for the test data is significantly higher at 85.7%, which is detecting a pattern and is much better than the average guess - our model training is successful, and B). when faced with random data, the model is merely guessing, because it is not trained for these data. Additionally, this is an indication that our model is not horribly underfit. It is better than guessing for the test data set, trained from the train set. And it is merely subpar for other data sets, as it should be."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0117cae7",
   "metadata": {
    "papermill": {
     "duration": 0.030504,
     "end_time": "2024-05-28T05:10:49.107729",
     "exception": false,
     "start_time": "2024-05-28T05:10:49.077225",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 9: Evaluate (and Improve?)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f97ffc0",
   "metadata": {
    "papermill": {
     "duration": 0.031853,
     "end_time": "2024-05-28T05:10:49.171338",
     "exception": false,
     "start_time": "2024-05-28T05:10:49.139485",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "I want to explore the hyperparameters and tune the model if I notice improvements. Additionally, I want to thoroughly explore modeling options, such as comparing predictive powers of the perceptron model to the SVM output. The aim is to select an optimized model for the sonar predictions, and confidently relay results for future sonar data sets."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98e3d850",
   "metadata": {
    "papermill": {
     "duration": 0.030585,
     "end_time": "2024-05-28T05:10:49.233778",
     "exception": false,
     "start_time": "2024-05-28T05:10:49.203193",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "First, I instantiate and configure the SVM model, again. This time, however, I am using a linear kernel (opposed to RBF), and the regularization hyperparameter C = 1.0. Gamma is a popular scale, and usually yields good results, hence we continue to use the default assignment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "d9878357",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:49.297781Z",
     "iopub.status.busy": "2024-05-28T05:10:49.297338Z",
     "iopub.status.idle": "2024-05-28T05:10:49.303096Z",
     "shell.execute_reply": "2024-05-28T05:10:49.301647Z"
    },
    "papermill": {
     "duration": 0.040643,
     "end_time": "2024-05-28T05:10:49.305655",
     "exception": false,
     "start_time": "2024-05-28T05:10:49.265012",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "svm_model_2 = SVC(kernel='linear', C=1.0, gamma='scale')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bba2ddd9",
   "metadata": {
    "papermill": {
     "duration": 0.030654,
     "end_time": "2024-05-28T05:10:49.367594",
     "exception": false,
     "start_time": "2024-05-28T05:10:49.336940",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Again, fitting the new classifier to training set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "0226456c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:49.432143Z",
     "iopub.status.busy": "2024-05-28T05:10:49.431644Z",
     "iopub.status.idle": "2024-05-28T05:10:49.448792Z",
     "shell.execute_reply": "2024-05-28T05:10:49.447768Z"
    },
    "papermill": {
     "duration": 0.053511,
     "end_time": "2024-05-28T05:10:49.451860",
     "exception": false,
     "start_time": "2024-05-28T05:10:49.398349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(kernel='linear')"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svm_model_2.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05be1fea",
   "metadata": {
    "papermill": {
     "duration": 0.031153,
     "end_time": "2024-05-28T05:10:49.514386",
     "exception": false,
     "start_time": "2024-05-28T05:10:49.483233",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We make predictions on test set, with our newly tuned SVM model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "00a662ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:49.578809Z",
     "iopub.status.busy": "2024-05-28T05:10:49.578392Z",
     "iopub.status.idle": "2024-05-28T05:10:49.586975Z",
     "shell.execute_reply": "2024-05-28T05:10:49.585459Z"
    },
    "papermill": {
     "duration": 0.044364,
     "end_time": "2024-05-28T05:10:49.589987",
     "exception": false,
     "start_time": "2024-05-28T05:10:49.545623",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred=svm_model_2.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d54a864e",
   "metadata": {
    "papermill": {
     "duration": 0.032297,
     "end_time": "2024-05-28T05:10:49.654900",
     "exception": false,
     "start_time": "2024-05-28T05:10:49.622603",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We examine the accuracy score, and compare it to our original SVM model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "557dbcf4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:49.721212Z",
     "iopub.status.busy": "2024-05-28T05:10:49.720270Z",
     "iopub.status.idle": "2024-05-28T05:10:49.727739Z",
     "shell.execute_reply": "2024-05-28T05:10:49.726304Z"
    },
    "papermill": {
     "duration": 0.043374,
     "end_time": "2024-05-28T05:10:49.730974",
     "exception": false,
     "start_time": "2024-05-28T05:10:49.687600",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM model 2 accuracy score with linear kernel and C=1.0 : 0.7381\n"
     ]
    }
   ],
   "source": [
    "print('SVM model 2 accuracy score with linear kernel and C=1.0 : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d86dd31d",
   "metadata": {
    "papermill": {
     "duration": 0.030853,
     "end_time": "2024-05-28T05:10:49.792854",
     "exception": false,
     "start_time": "2024-05-28T05:10:49.762001",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "I experimented with adjusting away from the default of the SVM (including the rbf kernal), and somewhat unsurprisingly the model lost accuracy with an output of about **73.8%**. This is likely because the recommended accuracy for these models is rbf, and by applying a linear kernal instead it moved away from optimization."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61d6924b",
   "metadata": {
    "papermill": {
     "duration": 0.030933,
     "end_time": "2024-05-28T05:10:49.855124",
     "exception": false,
     "start_time": "2024-05-28T05:10:49.824191",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "If we move back towards a rbf model, but also include C value (regularization parameter) of 100, we may see a different outcome."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "80682347",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:49.919370Z",
     "iopub.status.busy": "2024-05-28T05:10:49.918926Z",
     "iopub.status.idle": "2024-05-28T05:10:49.924723Z",
     "shell.execute_reply": "2024-05-28T05:10:49.923442Z"
    },
    "papermill": {
     "duration": 0.040865,
     "end_time": "2024-05-28T05:10:49.927211",
     "exception": false,
     "start_time": "2024-05-28T05:10:49.886346",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "svm_model_3 = SVC(kernel='rbf', C=100, gamma='scale')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4cc6df45",
   "metadata": {
    "papermill": {
     "duration": 0.031494,
     "end_time": "2024-05-28T05:10:49.990897",
     "exception": false,
     "start_time": "2024-05-28T05:10:49.959403",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "A third time, we apply the classifier to train set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "94c25da1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:50.057161Z",
     "iopub.status.busy": "2024-05-28T05:10:50.056027Z",
     "iopub.status.idle": "2024-05-28T05:10:50.070241Z",
     "shell.execute_reply": "2024-05-28T05:10:50.068924Z"
    },
    "papermill": {
     "duration": 0.05066,
     "end_time": "2024-05-28T05:10:50.072976",
     "exception": false,
     "start_time": "2024-05-28T05:10:50.022316",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(C=100)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svm_model_3.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "711e3c07",
   "metadata": {
    "papermill": {
     "duration": 0.031676,
     "end_time": "2024-05-28T05:10:50.136471",
     "exception": false,
     "start_time": "2024-05-28T05:10:50.104795",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "A third time, we produce a prediction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "12661ef6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:50.202454Z",
     "iopub.status.busy": "2024-05-28T05:10:50.201930Z",
     "iopub.status.idle": "2024-05-28T05:10:50.211700Z",
     "shell.execute_reply": "2024-05-28T05:10:50.210206Z"
    },
    "papermill": {
     "duration": 0.046727,
     "end_time": "2024-05-28T05:10:50.215306",
     "exception": false,
     "start_time": "2024-05-28T05:10:50.168579",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred=svm_model_3.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da2aebc2",
   "metadata": {
    "papermill": {
     "duration": 0.031092,
     "end_time": "2024-05-28T05:10:50.279040",
     "exception": false,
     "start_time": "2024-05-28T05:10:50.247948",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "A third time, we compute and compare the accuracy score."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "d929ec04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:50.344442Z",
     "iopub.status.busy": "2024-05-28T05:10:50.343497Z",
     "iopub.status.idle": "2024-05-28T05:10:50.351515Z",
     "shell.execute_reply": "2024-05-28T05:10:50.350084Z"
    },
    "papermill": {
     "duration": 0.043542,
     "end_time": "2024-05-28T05:10:50.354248",
     "exception": false,
     "start_time": "2024-05-28T05:10:50.310706",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM model 3 accuracy score with rbf kernel and C=100 : 0.9048\n"
     ]
    }
   ],
   "source": [
    "print('SVM model 3 accuracy score with rbf kernel and C=100 : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5bb0e06",
   "metadata": {
    "papermill": {
     "duration": 0.031281,
     "end_time": "2024-05-28T05:10:50.418022",
     "exception": false,
     "start_time": "2024-05-28T05:10:50.386741",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "With slight adjustments, moving back to a rbf and a C value of 100 (C is penalty parameter for misclassification/regularization), we see the accuracy increase beyond the default settings, which previously returned a winning accuracy score of about 85%, the new accuracy is **90.5%**. We need to be careful, however, because adjusting the regularization C=_ incorrectly can result in overfitting a model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfe61fc9",
   "metadata": {
    "papermill": {
     "duration": 0.031354,
     "end_time": "2024-05-28T05:10:50.481076",
     "exception": false,
     "start_time": "2024-05-28T05:10:50.449722",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### How does SVM Model 3 compare to using a perceptron? Is it possible using a perceptron is optimal, when compared to the SVM models?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56ba6a09",
   "metadata": {
    "papermill": {
     "duration": 0.03122,
     "end_time": "2024-05-28T05:10:50.543535",
     "exception": false,
     "start_time": "2024-05-28T05:10:50.512315",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let's take a closer look at this question using the optimized perceptron from Notebook 4."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77094831",
   "metadata": {
    "papermill": {
     "duration": 0.031452,
     "end_time": "2024-05-28T05:10:50.606425",
     "exception": false,
     "start_time": "2024-05-28T05:10:50.574973",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Library import, first."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "1c29ff21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:50.672801Z",
     "iopub.status.busy": "2024-05-28T05:10:50.672256Z",
     "iopub.status.idle": "2024-05-28T05:10:50.677956Z",
     "shell.execute_reply": "2024-05-28T05:10:50.676671Z"
    },
    "papermill": {
     "duration": 0.042817,
     "end_time": "2024-05-28T05:10:50.680627",
     "exception": false,
     "start_time": "2024-05-28T05:10:50.637810",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import Perceptron"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc13e628",
   "metadata": {
    "papermill": {
     "duration": 0.031326,
     "end_time": "2024-05-28T05:10:50.744546",
     "exception": false,
     "start_time": "2024-05-28T05:10:50.713220",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now we instantiate and configure our perceptron (the one with hyperparameter tuning for best optimization) with the same training/test set used for the SVM. This is using a maximum iteration of 10,000 epochs, which I assume should suffice."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "58dc880c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:50.809749Z",
     "iopub.status.busy": "2024-05-28T05:10:50.809296Z",
     "iopub.status.idle": "2024-05-28T05:10:50.815215Z",
     "shell.execute_reply": "2024-05-28T05:10:50.813771Z"
    },
    "papermill": {
     "duration": 0.042194,
     "end_time": "2024-05-28T05:10:50.818211",
     "exception": false,
     "start_time": "2024-05-28T05:10:50.776017",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "p = Perceptron(max_iter=10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "19c7ebc6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:50.883607Z",
     "iopub.status.busy": "2024-05-28T05:10:50.883118Z",
     "iopub.status.idle": "2024-05-28T05:10:50.897255Z",
     "shell.execute_reply": "2024-05-28T05:10:50.895989Z"
    },
    "papermill": {
     "duration": 0.049941,
     "end_time": "2024-05-28T05:10:50.899903",
     "exception": false,
     "start_time": "2024-05-28T05:10:50.849962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Perceptron(max_iter=10000)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8635c0ee",
   "metadata": {
    "papermill": {
     "duration": 0.031096,
     "end_time": "2024-05-28T05:10:50.962500",
     "exception": false,
     "start_time": "2024-05-28T05:10:50.931404",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Next, we create a prediction using the test data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "34641860",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:51.027675Z",
     "iopub.status.busy": "2024-05-28T05:10:51.027213Z",
     "iopub.status.idle": "2024-05-28T05:10:51.034866Z",
     "shell.execute_reply": "2024-05-28T05:10:51.033574Z"
    },
    "papermill": {
     "duration": 0.043769,
     "end_time": "2024-05-28T05:10:51.037663",
     "exception": false,
     "start_time": "2024-05-28T05:10:50.993894",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred = p.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "601d4309",
   "metadata": {
    "papermill": {
     "duration": 0.031804,
     "end_time": "2024-05-28T05:10:51.102735",
     "exception": false,
     "start_time": "2024-05-28T05:10:51.070931",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We examine and compare accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "9f0820d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:10:51.168680Z",
     "iopub.status.busy": "2024-05-28T05:10:51.168162Z",
     "iopub.status.idle": "2024-05-28T05:10:51.176421Z",
     "shell.execute_reply": "2024-05-28T05:10:51.174517Z"
    },
    "papermill": {
     "duration": 0.044558,
     "end_time": "2024-05-28T05:10:51.179448",
     "exception": false,
     "start_time": "2024-05-28T05:10:51.134890",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7142857142857143\n"
     ]
    }
   ],
   "source": [
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "print(\"Accuracy:\", accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "149c3b06",
   "metadata": {
    "papermill": {
     "duration": 0.032363,
     "end_time": "2024-05-28T05:10:51.243615",
     "exception": false,
     "start_time": "2024-05-28T05:10:51.211252",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We note the tuned **SVM model is ~90%** accurate, and the **perceptron (max iterations = 10,000) is ~71.4%** accurate. The perceptron is less accurate, though it is still better than blind guessing. SVM Model 3 is highly optimized for the prediction of these data, although I would consider carefully assessing it for overfitting. However, even using the default settings for SVM Model 1 (at the beginning of this Notebook), which is subject to less overfitting with C=1.0, the accuracy is still greater than the perceptron (about 71%) at SVM Model 1 score of **85.7%**."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "825a7649",
   "metadata": {
    "papermill": {
     "duration": 0.031718,
     "end_time": "2024-05-28T05:10:51.307976",
     "exception": false,
     "start_time": "2024-05-28T05:10:51.276258",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Conclusion\n",
    "In this Notebook I generated a series of three different Support Vector Machines (SVM) models to explore predictive outputs for the sonar data. I determined that the Radical Basis Function (RBF) is an optimal function for our data, and using a regularization parameter C=100 can increase the accuracy of the model by 5%. SVM model 1 (using default SVC() parameter settings) was roughly **~85%** accurate. This accuracy increased to roughly **90%** when the regaularization parameter C was adjusted upwards, increasing the penalty for misclassification.\n",
    "\n",
    "Overall, whether using the default SVM() settings, or tuning the model to include a higher penalty for misclassification, the SVM models prove successful in their predictive performance. I caution against using too high of a regualarization penatly, due to vulnerability for overfitting the model. I learned that it is critical to apply the correct function (somewhat obvious), otherwise accuracy will be greatly compromised. For example, when applying the linear function (opposed to RBF), the SVM model was significantly less reliable, at **~73%**, and more closely resembles a perceptron.\n",
    "\n",
    "I explored how the SVM models (generally) compared to an optimized perceptron. Although the perceptron's accuracy suggests it is capable of predicting sonar data, it is a less optimal modeling option when compared to the SVM models (with the RBF function, specifically), as its accuracy is only roughly **70%**, even after 10,000 training epochs.\n",
    "\n",
    "These explorations brought attention to three notable observations:\n",
    "1. SVM modeling appear more effective than perceptrons for classification problems. Although, when a linear function is used in a SVM model, the predictive accuracy appears equivalent.\n",
    "2. Accuracy for a SVM model can be improved with adjustments to the C parameter (penalty for misclassification), but this comes with a significant risk of overfitting.\n",
    "3. The RBF function is the correct choice for the SVM models used for these data. However, I am curious about other function options and their applicability. Other than tuning the model and testing accuracy outputs, are there indications for a choice function for SVM when it is not RBF?\n",
    "\n",
    "To conclude, I would spend time exploring the possibility for overfitting a SVM model when adjusting the C (penalty for misclassification). I would enjoy learning more about how this penalty is applied mathematically, and why it is effective. Furthermore, I wonder in which circumstances a perceptron would produce a more optimized model?"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 1320,
     "sourceId": 2380,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30458,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 32.051507,
   "end_time": "2024-05-28T05:10:52.364244",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-28T05:10:20.312737",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
